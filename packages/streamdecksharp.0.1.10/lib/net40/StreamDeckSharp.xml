<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>StreamDeckSharp</name>
    </assembly>
    <members>
        <member name="T:StreamDeckSharp.DeviceInfo">
            <summary>
            Device information about Stream Deck
            </summary>
        </member>
        <member name="P:StreamDeckSharp.DeviceInfo.DevicePath">
            <summary>
            Unique identifier for human interface device
            </summary>
        </member>
        <member name="M:StreamDeckSharp.DeviceInfo.Open">
            <summary>
            Opens the StreamDeck handle
            </summary>
            <returns>Returns an <see cref="T:StreamDeckSharp.IStreamDeck" /> reference</returns>
        </member>
        <member name="T:StreamDeckSharp.Exceptions.StreamDeckException">
            <summary>
            Base class for all StreamDeckSharp Exceptions
            </summary>
        </member>
        <member name="T:StreamDeckSharp.IStreamDeck">
            <summary>
            Bare minimum StreamDeck Interface.
            </summary>
        </member>
        <member name="P:StreamDeckSharp.IStreamDeck.KeyCount">
            <summary>
            The number of keys present on the Stream Deck
            </summary>
            <remarks>
            At the moment there is only a Stream Deck device with 5x3 keys.
            But this may change in the future so please use this property in your
            code / for-loops.
            </remarks>
        </member>
        <member name="E:StreamDeckSharp.IStreamDeck.KeyStateChanged">
            <summary>
            Is raised when a key is pressed
            </summary>
        </member>
        <member name="M:StreamDeckSharp.IStreamDeck.SetBrightness(System.Byte)">
            <summary>
            Sets the brightness for this <see cref="T:StreamDeckSharp.IStreamDeck" /></summary>
            <param name="percent">Brightness in percent (0 - 100)</param>
            <remarks>
            The brightness on the device is controlled with PWM (https://en.wikipedia.org/wiki/Pulse-width_modulation).
            This results in a non-linear correlation between set percentage and perceived brightness.
            
            In a nutshell: changing from 10 - 30 results in a bigger change than 80 - 100 (barely visible change)
            This effect should be compensated outside this library
            </remarks>
        </member>
        <member name="M:StreamDeckSharp.IStreamDeck.SetKeyBitmap(System.Int32,StreamDeckSharp.KeyBitmap)">
            <summary>
            Sets a background image for a given key
            </summary>
            <param name="keyId">Specifies which key the image will be applied on</param>
            <param name="bitmapData">Bitmap. The key will be painted black if this value is null.</param>
        </member>
        <member name="M:StreamDeckSharp.IStreamDeck.ShowLogo">
            <summary>
            Shows the Stream Deck logo (Fullscreen)
            </summary>
        </member>
        <member name="P:StreamDeckSharp.IStreamDeck.IconSize">
            <summary>
            Size of the icon in pixels
            </summary>
        </member>
        <member name="P:StreamDeckSharp.IStreamDeck.IsConnected">
            <summary>
            Gets a value indicating whether the StreamDeck is connected.
            </summary>
        </member>
        <member name="E:StreamDeckSharp.IStreamDeck.ConnectionStateChanged">
            <summary>
            Is raised when the StreamDeck is beeing disconnected or connected
            </summary>
        </member>
        <member name="F:StreamDeckSharp.KeyRepaintQueue.keyCooldownTime">
            <summary>
            Value choosen after many experiments ;-)
            See github wiki...
            </summary>
        </member>
        <member name="T:StreamDeckSharp.StreamDeck">
            <summary>
            This is a factorioy class to create IStreamDeck References
            </summary>
        </member>
        <member name="M:StreamDeckSharp.StreamDeck.OpenDevice">
            <summary>
            Enumerates connected Stream Decks and returns the first one.
            </summary>
            <returns>The default <see cref="T:StreamDeckSharp.IStreamDeck" /> HID</returns>
            <exception cref="T:StreamDeckSharp.Exceptions.StreamDeckNotFoundException">Thrown if no Stream Deck is found</exception>
        </member>
        <member name="M:StreamDeckSharp.StreamDeck.OpenDevice(System.String)">
            <summary>
            Get <see cref="T:StreamDeckSharp.IStreamDeck" /> with given <paramref name="devicePath" /></summary>
            <param name="devicePath" />
            <returns>
                <see cref="T:StreamDeckSharp.IStreamDeck" /> specified by <paramref name="devicePath" /></returns>
            <exception cref="T:StreamDeckSharp.Exceptions.StreamDeckNotFoundException">Thrown if no Stream Deck is found</exception>
        </member>
        <member name="M:StreamDeckSharp.StreamDeck.EnumerateDevices">
            <summary>
            Enumerates all available StreamDeck devices
            </summary>
            <returns>Returns <see cref="T:StreamDeckSharp.DeviceInfo" /> for every StreamDeck device found</returns>
        </member>
        <member name="T:StreamDeckSharp.HidCommunicationHelper">
            <summary>
            Internal StreamDeck HID communication class
            </summary>
        </member>
        <member name="T:StreamDeckSharp.HidClient">
            <summary>
            A (very simple) .NET Wrapper for the StreamDeck HID
            </summary>
        </member>
        <member name="T:StreamDeckSharp.InterfaceExtensions">
            <summary />
            <remarks>
            The <see cref="T:StreamDeckSharp.IStreamDeck" /> interface is pretty basic to simplify implementation.
            This extension class adds some commonly used functions to make things simpler.
            </remarks>
        </member>
        <member name="M:StreamDeckSharp.InterfaceExtensions.SetKeyBitmap(StreamDeckSharp.IStreamDeck,StreamDeckSharp.KeyBitmap)">
            <summary>
            Sets a background image for all keys
            </summary>
            <param name="deck" />
            <param name="bitmap" />
        </member>
        <member name="M:StreamDeckSharp.InterfaceExtensions.ClearKey(StreamDeckSharp.IStreamDeck,System.Int32)">
            <summary>
            Sets background to black for a given key
            </summary>
            <param name="deck" />
            <param name="keyId" />
        </member>
        <member name="M:StreamDeckSharp.InterfaceExtensions.ClearKeys(StreamDeckSharp.IStreamDeck)">
            <summary>
            Sets background to black for all given keys
            </summary>
            <param name="deck" />
        </member>
        <member name="T:StreamDeckSharp.KeyBitmap">
            <summary>
            Represents a bitmap that can be used as key images
            </summary>
        </member>
        <member name="P:StreamDeckSharp.KeyBitmap.Black">
            <summary>
            Solid black bitmap
            </summary>
            <remarks>
            If you need a black bitmap (for example to clear keys) use this property for better performance (in theory ^^)
            </remarks>
        </member>
        <member name="F:StreamDeckSharp.KeyBitmap.rawBitmapData">
            <remarks>
            The raw pixel format is a byte array of length 15552. This number is based on the image
            dimensions used by StreamDeck 72x72 pixels and 3 channels (RGB) for each pixel. 72 x 72 x 3 = 15552.
            
            The channels are in the order BGR and the pixel rows (stride) are in reverse order.
            If you need some help try <see cref="T:StreamDeckSharp.KeyBitmap" /></remarks>
        </member>
        <member name="M:StreamDeckSharp.KeyBitmap.CalculateObjectHash">
            <summary>
            Calculates the SHA1 hash of bitmap and returns only 32bit (object HashCode)
            </summary>
            <returns />
        </member>
        <member name="M:StreamDeckSharp.KeyBitmap.FromRGBColor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a solid color bitmap
            </summary>
            <param name="R">Red channel</param>
            <param name="G">Green channel</param>
            <param name="B">Blue channel</param>
            <returns />
        </member>
        <member name="M:StreamDeckSharp.KeyBitmap.FromStream(System.IO.Stream)">
            <summary>
            Create a bitmap from encoded image stream
            </summary>
            <param name="bitmapStream" />
            <returns />
        </member>
        <member name="M:StreamDeckSharp.KeyBitmap.FromFile(System.String)">
            <summary>
            Create a bitmap from encoded image
            </summary>
            <param name="bitmapFile" />
            <returns />
        </member>
        <member name="M:StreamDeckSharp.KeyBitmap.FromGraphics(System.Action{System.Drawing.Graphics})">
            <summary>
            Create key bitmap from graphics commands (for example with lambda expression)
            </summary>
            <param name="graphicsAction" />
            <returns />
        </member>
        <member name="M:StreamDeckSharp.KeyBitmap.FromRawBitmap(System.Byte[])">
            <summary>
            Create bitmap from 72x72 3x 8 bit channel BGR
            </summary>
            <param name="bitmapData" />
            <returns />
        </member>
        <member name="M:StreamDeckSharp.KeyBitmap.FromWpfElement(System.Windows.FrameworkElement)">
            <summary>
            Uses a WPF FrameworkElement to create a keyImage
            </summary>
            <param name="e" />
            <returns />
        </member>
        <member name="M:StreamDeckSharp.KeyBitmap.ConvertPbgra32ToStreamDeckKey(System.Byte[])">
            <summary>
            Convert 32bit color (4 channel) to 24bit bgr + mirror lines horizontally (for streamdeck)
            </summary>
            <param name="pbgra32" />
            <returns />
        </member>
    </members>
</doc>